#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();

    uint16_t potentiometerValue = 0;

    while (1) {
        // Read potentiometer value (0 to 4095)
        // Replace this with your potentiometer reading logic
        potentiometerValue = /* Read potentiometer value here */;

        // Convert the potentiometer value to a string
        char buffer[10];
        snprintf(buffer, sizeof(buffer), "%hu\n", potentiometerValue);

        // Send the potentiometer value over UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

        HAL_Delay(1000); // Delay for some time before sending the next value
    }
}

void SystemClock_Config(void) {
    // Configure system clock as needed
}

static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 9600;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    while (1) {
        // Handle errors here
    }
}
